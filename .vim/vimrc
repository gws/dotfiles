" default language encoding
set encoding=utf-8

" make edited files utf-8
set fileencoding=utf-8

" files should not execute things in my editor
set nomodeline

" avoid hanging on long lines
set synmaxcol=420

" enable filetype plugins
filetype plugin indent on

" ensure dialog when :q, :w, :wq fail
set confirm
" abbreviate messages
set shortmess+=filmnrxoOtT
" better unix / windows compatibility
set viewoptions=folds,options,cursor,unix,slash
" allow for cursor beyond last character
set virtualedit=onemore
" allow buffer switching without saving
set hidden

" no spacing between rows
set linespace=0
" no line numbering
set nonumber
" highlight search terms
set hlsearch
set winminheight=0
" case insensitive search
set ignorecase
" case sensitive sometimes
set smartcase
" default on /g modifier for substitution
set gdefault
set wildignore=.*.*~,.*.sw?,.swp,*.hi,*.o
" matches longest, then full
set wildmode=list:longest,full
" what bs and cursor keys wrap to
set whichwrap=b,s,h,l,<,>,[,]
" auto-fold code
set foldenable
set fillchars=

" problematic whitespace
set list

" indentation and tabbing defaults
set nowrap
set linebreak
set showbreak=â€¦
set expandtab shiftwidth=2 tabstop=2 softtabstop=2
set textwidth=80
set formatoptions-=t

" clojure formatting
let g:clojure_align_subforms=1
let g:clojure_fuzzy_indent=1
let g:clojure_fuzzy_indent_patterns=['^with', '^def', '^let', '^try']
let g:clojure_syntax_keywords={
  \ 'clojureMacro': ['defproject', 'deftask'],
  \ }

" Temporary files
if !isdirectory(expand('~/.cache/vim/undo'))
    call mkdir(expand('~/.cache/vim/undo'), 'p', 0700)
endif
if isdirectory(expand('~/.cache/vim'))
    set directory=~/.cache/vim
    set viminfo+=n~/.cache/vim/viminfo
    let g:netrw_home=expand('~/.cache/vim')
endif
if has('persistent_undo') && isdirectory(expand('~/.cache/vim/undo'))
    set undofile
    set undodir=~/.cache/vim/undo
endif

if has('gui_running')
    set guioptions=c
else
    set ttyfast
    set t_Co=256
endif

set background=dark
colorscheme solarized8

function! Figgieback()
  execute "Piggieback (do (require '[figwheel-sidecar.repl-api]) (figwheel-sidecar.repl-api/repl-env))"
endfunction

augroup gws
    au VimEnter * :AirlineTheme sol

    au BufRead,BufNewFile *.phtml,*.ptxt setl filetype=php
    au BufRead,BufNewFile *.boot setl filetype=clojure

    au BufRead,BufNewFile Vagrantfile setl filetype=ruby

    au FileType gitconfig setl noexpandtab shiftwidth=2 tabstop=2 softtabstop=2

    au FileType perl,php,python setl shiftwidth=4 tabstop=4 softtabstop=4

    au FileType c,cpp,go setl noexpandtab shiftwidth=8 tabstop=8 softtabstop=8

    au FileType clojure command! Figgieback :execute Figgieback()

    au FileType haskell setl shiftwidth=4 tabstop=4 softtabstop=4 shiftround
augroup END

" Key mappings

" rebind from \ to , as it is a little more standard
let g:mapleader=','
let g:maplocalleader=','

" easier command entry
map ; :
noremap ;; ;

" clearing highlighted search
nmap <silent> <leader>/ :nohlsearch<CR>

" if you forget to sudo - really write the file
cmap w!! w !sudo tee % >/dev/null

" base64-decode a visual selection
vnoremap <leader>64d y:echo system('base64 -d', @")<CR>
" base64-encode a visual selection
vnoremap <leader>64e y:echo system('base64', @")<CR>

" Plugin: NerdTree
map <C-e> :NERDTreeToggle<CR>
map <leader>e :NERDTreeFind<CR>
nmap <leader>nt :NERDTreeFind<CR>

" vim-fireplace (Clojure-specific)
map <leader>cr :Require<CR>
map <leader>cra :Require!<CR>
map <leader>ct :RunTests<CR>
map <leader>cta :RunAllTests<CR>
map <leader>ctc :.RunTests<CR>

" ghcmod-vim (Haskell-specific)
map <leader>htw :GhcModTypeInsert<CR>
map <leader>hts :GhcModSplitFunCase<CR>
map <leader>htq :GhcModType<CR>
map <leader>hte :GhcModTypeClear<CR>

let NERDTreeShowBookmarks=1
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=0
let NERDTreeShowHidden=1

if filereadable(expand("~/.vim/vimrc-local"))
    source ~/.vim/vimrc-local
endif
